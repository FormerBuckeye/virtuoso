// NB: This code is auto-generated by make_iferret_code.pl. 
// It contains the big enum type of all info-flow ops.
#ifndef __IFERRET_OPS_H_ 
#define __IFERRET_OPS_H_ 

typedef enum iferret_log_op_enum {
// 0 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_AAA);
IFLO_AAA,
// 1 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_AAD);
IFLO_AAD,
// 2 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_AAM);
IFLO_AAM,
// 3 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_AAS);
IFLO_AAS,
// 4 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_A0_AL);
IFLO_ADDL_A0_AL,
// 5 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_A0_IM);
IFLO_ADDL_A0_IM,
// 6 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_8(IFLO_ADDL_A0_SEG, PTR_TO_ADDR(env) + PARAM1);  
IFLO_ADDL_A0_SEG,
// 7 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_A0_SS);
IFLO_ADDL_A0_SS,
// 8 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_EDI_T0);
IFLO_ADDL_EDI_T0,
// 9 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_ESI_T0);
IFLO_ADDL_ESI_T0,
// 10 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_ESP_2);
IFLO_ADDL_ESP_2,
// 11 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_ESP_4);
IFLO_ADDL_ESP_4,
// 12 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_ESP_IM);
IFLO_ADDL_ESP_IM,
// 13 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_T0_IM);
IFLO_ADDL_T0_IM,
// 14 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_T0_T1);
IFLO_ADDL_T0_T1,
// 15 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDL_T1_IM);
IFLO_ADDL_T1_IM,
// 16 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDW_EDI_T0);
IFLO_ADDW_EDI_T0,
// 17 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDW_ESI_T0);
IFLO_ADDW_ESI_T0,
// 18 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDW_ESP_2);
IFLO_ADDW_ESP_2,
// 19 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDW_ESP_4);
IFLO_ADDW_ESP_4,
// 20 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ADDW_ESP_IM);
IFLO_ADDW_ESP_IM,
// 21 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ANDL_A0_FFFF);
IFLO_ANDL_A0_FFFF,
// 22 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ANDL_T0_FFFF);
IFLO_ANDL_T0_FFFF,
// 23 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ANDL_T0_IM);
IFLO_ANDL_T0_IM,
// 24 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ANDL_T0_T1);
IFLO_ANDL_T0_T1,
// 25 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ARPL);
IFLO_ARPL,
// 26 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_BSWAPL_T0);
IFLO_BSWAPL_T0,
// 27 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_CLTS);
IFLO_CLTS,
// 28 
// ./target-i386/helper.c

// -->       iferret_log_info_flow_op_write_0(IFLO_CMPXCHG8B_PART1);
IFLO_CMPXCHG8B_PART1,
// 29 
// ./target-i386/helper.c

// --> 	iferret_log_info_flow_op_write_0(IFLO_CMPXCHG8B_PART2);
IFLO_CMPXCHG8B_PART2,
// 30 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_CPUID);
IFLO_CPUID,
// 31 
// ./exec.c

// --> 	      iferret_log_info_flow_op_write_8(IFLO_CPU_READ_ADDR, addr1);
IFLO_CPU_READ_ADDR,
// 32 
// ./exec.c

// --> 		iferret_log_info_flow_op_write_8(IFLO_CPU_WRITE_ADDR,addr1);
IFLO_CPU_WRITE_ADDR,
// 33 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_DAA);
IFLO_DAA,
// 34 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_DAS);
IFLO_DAS,
// 35 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_DECL_ECX);
IFLO_DECL_ECX,
// 36 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_DECL_T0);
IFLO_DECL_T0,
// 37 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_DECW_ECX);
IFLO_DECW_ECX,
// 38 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_DIVB_AL_T0);
IFLO_DIVB_AL_T0,
// 39 
// ./target-i386/helper.c

// -->     iferret_log_info_flow_op_write_0(IFLO_DIVL_EAX_T0);
IFLO_DIVL_EAX_T0,
// 40 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ENTER_LEVEL);
IFLO_ENTER_LEVEL,
// 41 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_FNSTSW_EAX);
IFLO_FNSTSW_EAX,
// 42 
// ./hw/ide.c

// -->     iferret_log_info_flow_op_write_884(IFLO_HD_TRANSFER, IO_BUFFER_BASE_ADDR, HD_BASE_ADDR + sector_num*512, n*512);
IFLO_HD_TRANSFER,
// 43 
// ./hw/ide.c

// -->     iferret_log_info_flow_op_write_8(IFLO_HD_TRANSFER_PART1, IO_BUFFER_BASE_ADDR + (s->data_ptr - s->data_ptr_base));
IFLO_HD_TRANSFER_PART1,
// 44 
// ./hw/ide.c

// -->     iferret_log_info_flow_op_write_84(IFLO_HD_TRANSFER_PART2, IO_BUFFER_BASE_ADDR + (s->data_ptr - s->data_ptr_base), 4);
IFLO_HD_TRANSFER_PART2,
// 45 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_IDIVB_AL_T0);
IFLO_IDIVB_AL_T0,
// 46 
// ./target-i386/helper.c

// -->     iferret_log_info_flow_op_write_0(IFLO_IDIVL_EAX_T0);
IFLO_IDIVL_EAX_T0,
// 47 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_IDIVW_AX_T0);
IFLO_IDIVW_AX_T0,
// 48 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_IMULB_A0_T0);
IFLO_IMULB_A0_T0,
// 49 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_IMULL_EAX_T0);
IFLO_IMULL_EAX_T0,
// 50 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_IMULL_T0_T1);
IFLO_IMULL_T0_T1,
// 51 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_IMULW_AX_T0);
IFLO_IMULW_AX_T0,
// 52 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_IMULW_T0_T1);
IFLO_IMULW_T0_T1,
// 53 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_INCL_T0);
IFLO_INCL_T0,
// 54 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_INVLPG_A0);
IFLO_INVLPG_A0,
// 55 
// ./target-i386/iferret_syscall.c

// --> 	iferret_log_sysret_op_write_44444(IFLO_IRET, pid, eip_for_callsite, another_eip, element.syscall.eax, EAX);
IFLO_IRET,
// 56 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_IRET_PROTECTED);
IFLO_IRET_PROTECTED,
// 57 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_IRET_REAL);
IFLO_IRET_REAL,
// 58 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_JMP_T0);
IFLO_JMP_T0,
// 59 
// ./hw/pckbd.c

// -->       iferret_log_info_flow_op_write_4(IFLO_KEYBOARD_INPUT, rv);
IFLO_KEYBOARD_INPUT,
// 60 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_LAR);
IFLO_LAR,
// 61 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_LCALL_PROTECTED_T0_T1);
IFLO_LCALL_PROTECTED_T0_T1,
// 62 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_LCALL_REAL_T0_T1);
IFLO_LCALL_REAL_T0_T1,
// 63 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_LLDT_T0);
IFLO_LLDT_T0,
// 64 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_LMSW_T0);
IFLO_LMSW_T0,
// 65 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_LRET_PROTECTED);
IFLO_LRET_PROTECTED,
// 66 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_LSL);
IFLO_LSL,
// 67 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_LTR_T0);
IFLO_LTR_T0,
// 68 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MOVB_EFLAGS_T0);
IFLO_MOVB_EFLAGS_T0,
// 69 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_A0_IM);
IFLO_MOVL_A0_IM,
// 70 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_8(IFLO_MOVL_A0_SEG, PTR_TO_ADDR(env) + PARAM1);
IFLO_MOVL_A0_SEG,
// 71 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_CRN_T0);
IFLO_MOVL_CRN_T0,
// 72 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_DRN_T0);
IFLO_MOVL_DRN_T0,
// 73 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MOVL_EFLAGS_T0);
IFLO_MOVL_EFLAGS_T0,
// 74 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MOVL_EFLAGS_T0_CPL0);
IFLO_MOVL_EFLAGS_T0_CPL0,
// 75 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MOVL_EFLAGS_T0_IO);
IFLO_MOVL_EFLAGS_T0_IO,
// 76 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_EIP_IM);
IFLO_MOVL_EIP_IM,
// 77 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_8(IFLO_MOVL_ENV_T0, PTR_TO_ADDR(env) + PARAM1);
IFLO_MOVL_ENV_T0,
// 78 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_8(IFLO_MOVL_ENV_T1, PTR_TO_ADDR(env) + PARAM1);
IFLO_MOVL_ENV_T1,
// 79 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_T0_0);
IFLO_MOVL_T0_0,
// 80 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MOVL_T0_EFLAGS);
IFLO_MOVL_T0_EFLAGS,
// 81 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_8(IFLO_MOVL_T0_ENV, PTR_TO_ADDR(env) + PARAM1);
IFLO_MOVL_T0_ENV,
// 82 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_T0_IM);
IFLO_MOVL_T0_IM,
// 83 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_T0_IMU);
IFLO_MOVL_T0_IMU,
// 84 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_T0_SEG);
IFLO_MOVL_T0_SEG,
// 85 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_T0_T1);
IFLO_MOVL_T0_T1,
// 86 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_T1_A0);
IFLO_MOVL_T1_A0,
// 87 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_T1_IM);
IFLO_MOVL_T1_IM,
// 88 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVL_T1_IMU);
IFLO_MOVL_T1_IMU,
// 89 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVSBL_T0_T0);
IFLO_MOVSBL_T0_T0,
// 90 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVSBW_AX_AL);
IFLO_MOVSBW_AX_AL,
// 91 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVSLQ_EDX_EAX);
IFLO_MOVSLQ_EDX_EAX,
// 92 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVSWL_DX_AX);
IFLO_MOVSWL_DX_AX,
// 93 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVSWL_EAX_AX);
IFLO_MOVSWL_EAX_AX,
// 94 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVSWL_T0_T0);
IFLO_MOVSWL_T0_T0,
// 95 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_8(IFLO_MOVTL_ENV_T0, PTR_TO_ADDR(env) + PARAM1);
IFLO_MOVTL_ENV_T0,
// 96 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_8(IFLO_MOVTL_ENV_T1, PTR_TO_ADDR(env) + PARAM1);
IFLO_MOVTL_ENV_T1,
// 97 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVTL_T0_CR8);
IFLO_MOVTL_T0_CR8,
// 98 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_8(IFLO_MOVTL_T0_ENV, PTR_TO_ADDR(env) + PARAM1);
IFLO_MOVTL_T0_ENV,
// 99 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_8(IFLO_MOVTL_T1_ENV, PTR_TO_ADDR(env) + PARAM1);
IFLO_MOVTL_T1_ENV,
// 100 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MOVW_EFLAGS_T0);
IFLO_MOVW_EFLAGS_T0,
// 101 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MOVW_EFLAGS_T0_CPL0);
IFLO_MOVW_EFLAGS_T0_CPL0,
// 102 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MOVW_EFLAGS_T0_IO);
IFLO_MOVW_EFLAGS_T0_IO,
// 103 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVZBL_T0_T0);
IFLO_MOVZBL_T0_T0,
// 104 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_MOVZWL_T0_T0);
IFLO_MOVZWL_T0_T0,
// 105 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MOV_T0_CC);
IFLO_MOV_T0_CC,
// 106 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MULB_A0_T0);
IFLO_MULB_A0_T0,
// 107 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MULL_EAX_T0);
IFLO_MULL_EAX_T0,
// 108 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_MULW_AX_T0);
IFLO_MULW_AX_T0,
// 109 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_NEGL_T0);
IFLO_NEGL_T0,
// 110 
// ./hw/pckbd.c

// --> 	iferret_log_info_flow_op_write_s(IFLO_NEW_KEYBOARD_LABEL, iferret_keyboard_label);
IFLO_NEW_KEYBOARD_LABEL,
// 111 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_NOTL_T0);
IFLO_NOTL_T0,
// 112 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_ADDL_A0_R_S1,REGNUM);
IFLO_OPREG_TEMPL_ADDL_A0_R_S1,
// 113 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_ADDL_A0_R_S2,REGNUM);
IFLO_OPREG_TEMPL_ADDL_A0_R_S2,
// 114 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_ADDL_A0_R_S3,REGNUM);
IFLO_OPREG_TEMPL_ADDL_A0_R_S3,
// 115 
// ./target-i386/opreg_template.h

// -->     iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_CMOVL_R_T1_T0,REGNUM);
IFLO_OPREG_TEMPL_CMOVL_R_T1_T0,
// 116 
// ./iferret_info_flow.c

// -->     iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_CMOVW_R_T1_T0,REGNUM);
// ./target-i386/opreg_template.h

// -->     iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_CMOVW_R_T1_T0,REGNUM);
IFLO_OPREG_TEMPL_CMOVW_R_T1_T0,
// 117 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVB_R_T0,REGNUM);
IFLO_OPREG_TEMPL_MOVB_R_T0,
// 118 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVB_R_T1,REGNUM);
IFLO_OPREG_TEMPL_MOVB_R_T1,
// 119 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVH_R_T0,REGNUM);
IFLO_OPREG_TEMPL_MOVH_R_T0,
// 120 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVH_R_T1,REGNUM);
IFLO_OPREG_TEMPL_MOVH_R_T1,
// 121 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVH_T0_R,REGNUM);
IFLO_OPREG_TEMPL_MOVH_T0_R,
// 122 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVH_T1_R,REGNUM);
IFLO_OPREG_TEMPL_MOVH_T1_R,
// 123 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVL_A0_R,REGNUM);
IFLO_OPREG_TEMPL_MOVL_A0_R,
// 124 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVL_R_A0,REGNUM);
IFLO_OPREG_TEMPL_MOVL_R_A0,
// 125 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVL_R_T0,REGNUM);
IFLO_OPREG_TEMPL_MOVL_R_T0,
// 126 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVL_R_T1,REGNUM);
IFLO_OPREG_TEMPL_MOVL_R_T1,
// 127 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVL_T0_R,REGNUM);
IFLO_OPREG_TEMPL_MOVL_T0_R,
// 128 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVL_T1_R,REGNUM);
IFLO_OPREG_TEMPL_MOVL_T1_R,
// 129 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVW_R_A0,REGNUM);
IFLO_OPREG_TEMPL_MOVW_R_A0,
// 130 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVW_R_T0,REGNUM);
IFLO_OPREG_TEMPL_MOVW_R_T0,
// 131 
// ./target-i386/opreg_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPREG_TEMPL_MOVW_R_T1,REGNUM);
IFLO_OPREG_TEMPL_MOVW_R_T1,
// 132 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDL_T0_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_LDL_T0_A0,
// 133 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDL_T1_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_LDL_T1_A0,
// 134 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDSB_T0_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_LDSB_T0_A0,
// 135 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDSB_T1_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_LDSB_T1_A0,
// 136 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDSW_T0_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_LDSW_T0_A0,
// 137 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDSW_T1_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_LDSW_T1_A0,
// 138 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDUB_T0_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_LDUB_T0_A0,
// 139 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDUB_T1_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_LDUB_T1_A0,
// 140 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDUW_T0_A0,MEMSUFFIXNUM,phys_a0());  
IFLO_OPS_MEM_LDUW_T0_A0,
// 141 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_LDUW_T1_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_LDUW_T1_A0,
// 142 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_STB_T0_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_STB_T0_A0,
// 143 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_STL_T0_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_STL_T0_A0,
// 144 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_STL_T1_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_STL_T1_A0,
// 145 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_STW_T0_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_STW_T0_A0,
// 146 
// ./target-i386/ops_mem.h

// -->   iferret_log_info_flow_op_write_18(IFLO_OPS_MEM_STW_T1_A0,MEMSUFFIXNUM,phys_a0());
IFLO_OPS_MEM_STW_T1_A0,
// 147 
// ./target-i386/ops_template_mem.h

// -->     iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_ADC_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_ADC_T0_T1_CC,
// 148 
// ./target-i386/ops_template_mem.h

// -->     iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_ADC_T0_T1_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_ADC_T0_T1_CC_MEMWRITE,
// 149 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_ADD_BIT_A0_T1,SHIFT);
IFLO_OPS_TEMPLATE_ADD_BIT_A0_T1,
// 150 
// ./target-i386/ops_template.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_BSF_T0_CC,SHIFT);
IFLO_OPS_TEMPLATE_BSF_T0_CC,
// 151 
// ./target-i386/ops_template.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_BSR_T0_CC,SHIFT);
IFLO_OPS_TEMPLATE_BSR_T0_CC,
// 152 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_BTC_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_BTC_T0_T1_CC,
// 153 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_BTR_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_BTR_T0_T1_CC,
// 154 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_BTS_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_BTS_T0_T1_CC,
// 155 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_CMPXCHG_T0_T1_EAX_CC,SHIFT);
IFLO_OPS_TEMPLATE_CMPXCHG_T0_T1_EAX_CC,
// 156 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_CMPXCHG_T0_T1_EAX_CC_CASE2,SHIFT);
IFLO_OPS_TEMPLATE_CMPXCHG_T0_T1_EAX_CC_CASE2,
// 157 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_CMPXCHG_T0_T1_EAX_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_CMPXCHG_T0_T1_EAX_CC_MEMWRITE,
// 158 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_8(IFLO_OPS_TEMPLATE_HD_TRANSFER_PART1,IFRBA(IFRN_T0));    
IFLO_OPS_TEMPLATE_HD_TRANSFER_PART1,
// 159 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_81(IFLO_OPS_TEMPLATE_HD_TRANSFER_PART2,IFRBA(IFRN_T0),4);    
IFLO_OPS_TEMPLATE_HD_TRANSFER_PART2,
// 160 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_IN_DX_T0,SHIFT);
IFLO_OPS_TEMPLATE_IN_DX_T0,
// 161 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_IN_T0_T1,SHIFT);
IFLO_OPS_TEMPLATE_IN_T0_T1,
// 162 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_MOVL_T0_DSHIFT,SHIFT);
IFLO_OPS_TEMPLATE_MOVL_T0_DSHIFT,
// 163 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_4(IFLO_OPS_TEMPLATE_NETWORK_INPUT_BYTE_T0,T0);	
IFLO_OPS_TEMPLATE_NETWORK_INPUT_BYTE_T0,
// 164 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_4(IFLO_OPS_TEMPLATE_NETWORK_INPUT_BYTE_T1,T1);
IFLO_OPS_TEMPLATE_NETWORK_INPUT_BYTE_T1,
// 165 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_4(IFLO_OPS_TEMPLATE_NETWORK_INPUT_LONG_T0,T0);	
IFLO_OPS_TEMPLATE_NETWORK_INPUT_LONG_T0,
// 166 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_4(IFLO_OPS_TEMPLATE_NETWORK_INPUT_LONG_T1,T1);
IFLO_OPS_TEMPLATE_NETWORK_INPUT_LONG_T1,
// 167 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_4(IFLO_OPS_TEMPLATE_NETWORK_INPUT_WORD_T0,T0);	
IFLO_OPS_TEMPLATE_NETWORK_INPUT_WORD_T0,
// 168 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_4(IFLO_OPS_TEMPLATE_NETWORK_INPUT_WORD_T1,T1);
IFLO_OPS_TEMPLATE_NETWORK_INPUT_WORD_T1,
// 169 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_0(IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_BYTE_T0);     
IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_BYTE_T0,
// 170 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_0(IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_BYTE_T1); 
IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_BYTE_T1,
// 171 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_0(IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_LONG_T0);     
IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_LONG_T0,
// 172 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_0(IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_LONG_T1); 
IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_LONG_T1,
// 173 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_0(IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_WORD_T0);     
IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_WORD_T0,
// 174 
// ./target-i386/ops_template.h

// -->     iferret_log_info_flow_op_write_0(IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_WORD_T1); 
IFLO_OPS_TEMPLATE_NETWORK_OUTPUT_WORD_T1,
// 175 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_RCL_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_RCL_T0_T1_CC,
// 176 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_RCL_T0_T1_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_RCL_T0_T1_CC_MEMWRITE,
// 177 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_RCR_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_RCR_T0_T1_CC,
// 178 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_RCR_T0_T1_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_RCR_T0_T1_CC_MEMWRITE,
// 179 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_ROL_T0_T1,SHIFT);
IFLO_OPS_TEMPLATE_ROL_T0_T1,
// 180 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_ROL_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_ROL_T0_T1_CC,
// 181 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_ROL_T0_T1_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_ROL_T0_T1_CC_MEMWRITE,
// 182 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_ROL_T0_T1_MEMRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_ROL_T0_T1_MEMRITE,
// 183 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_ROR_T0_T1,SHIFT);
IFLO_OPS_TEMPLATE_ROR_T0_T1,
// 184 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_ROR_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_ROR_T0_T1_CC,
// 185 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_ROR_T0_T1_CC_MEMRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_ROR_T0_T1_CC_MEMRITE,
// 186 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_ROR_T0_T1_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_ROR_T0_T1_MEMWRITE,
// 187 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SAR_T0_T1,SHIFT);
IFLO_OPS_TEMPLATE_SAR_T0_T1,
// 188 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SAR_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_SAR_T0_T1_CC,
// 189 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_SAR_T0_T1_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_SAR_T0_T1_CC_MEMWRITE,
// 190 
// ./target-i386/ops_template_mem.h

// -->     iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SBB_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_SBB_T0_T1_CC,
// 191 
// ./target-i386/ops_template_mem.h

// -->     iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_SBB_T0_T1_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_SBB_T0_T1_CC_MEMWRITE,
// 192 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SETBE_T0_SUB,SHIFT);
IFLO_OPS_TEMPLATE_SETBE_T0_SUB,
// 193 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SETB_T0_SUB,SHIFT);
IFLO_OPS_TEMPLATE_SETB_T0_SUB,
// 194 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SETLE_T0_SUB,SHIFT);
IFLO_OPS_TEMPLATE_SETLE_T0_SUB,
// 195 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SETL_T0_SUB,SHIFT);
IFLO_OPS_TEMPLATE_SETL_T0_SUB,
// 196 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SETS_T0_SUB,SHIFT);
IFLO_OPS_TEMPLATE_SETS_T0_SUB,
// 197 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SETZ_T0_SUB,SHIFT);
IFLO_OPS_TEMPLATE_SETZ_T0_SUB,
// 198 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SHLD_T0_T1_ECX_CC,SHIFT);
IFLO_OPS_TEMPLATE_SHLD_T0_T1_ECX_CC,
// 199 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_SHLD_T0_T1_ECX_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_SHLD_T0_T1_ECX_CC_MEMWRITE,
// 200 
// ./target-i386/ops_template_mem.h

// -->     iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SHLD_T0_T1_IM_CC,SHIFT);
IFLO_OPS_TEMPLATE_SHLD_T0_T1_IM_CC,
// 201 
// ./target-i386/ops_template_mem.h

// -->     iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_SHLD_T0_T1_IM_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_SHLD_T0_T1_IM_CC_MEMWRITE,
// 202 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SHL_T0_T1,SHIFT);
IFLO_OPS_TEMPLATE_SHL_T0_T1,
// 203 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SHL_T0_T1_CC,SHIFT);
IFLO_OPS_TEMPLATE_SHL_T0_T1_CC,
// 204 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_SHL_T0_T1_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_SHL_T0_T1_CC_MEMWRITE,
// 205 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SHRD_T0_T1_ECX_CC,SHIFT);
IFLO_OPS_TEMPLATE_SHRD_T0_T1_ECX_CC,
// 206 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_SHRD_T0_T1_ECX_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_SHRD_T0_T1_ECX_CC_MEMWRITE,
// 207 
// ./target-i386/ops_template_mem.h

// -->     iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SHRD_T0_T1_IM_CC,SHIFT);
IFLO_OPS_TEMPLATE_SHRD_T0_T1_IM_CC,
// 208 
// ./target-i386/ops_template_mem.h

// -->     iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_SHRD_T0_T1_IM_CC_MEMWRITE,SHIFT,phys_a0());
IFLO_OPS_TEMPLATE_SHRD_T0_T1_IM_CC_MEMWRITE,
// 209 
// ./target-i386/ops_template.h

// -->   iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SHR_T0_T1,SHIFT);
IFLO_OPS_TEMPLATE_SHR_T0_T1,
// 210 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_1(IFLO_OPS_TEMPLATE_SHR_T0_T1_CC, SHIFT);
IFLO_OPS_TEMPLATE_SHR_T0_T1_CC,
// 211 
// ./target-i386/ops_template_mem.h

// --> 	iferret_log_info_flow_op_write_18(IFLO_OPS_TEMPLATE_SHR_T0_T1_CC_MEMWRITE, SHIFT, phys_a0());
IFLO_OPS_TEMPLATE_SHR_T0_T1_CC_MEMWRITE,
// 212 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_ORL_T0_T1);
IFLO_ORL_T0_T1,
// 213 
// ./target-i386/helper.c

// -->   iferret_log_op_write_4(IFLO_PID_CHANGE,current_pid);
IFLO_PID_CHANGE,
// 214 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_PROTECTED_T0_T1);
IFLO_PROTECTED_T0_T1,
// 215 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_RDMSR);
IFLO_RDMSR,
// 216 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_RDTSC);
IFLO_RDTSC,
// 217 
// ./target-i386/helper.c

// -->     iferret_log_info_flow_op_write_0(IFLO_RESTORE_ENV);
IFLO_RESTORE_ENV,
// 218 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SALC);
IFLO_SALC,
// 219 
// ./target-i386/helper.c

// --> 	iferret_log_info_flow_op_write_4(IFLO_SAVE_REG,EDI);
IFLO_SAVE_REG,
// 220 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_SEG_T0);
IFLO_SEG_T0,
// 221 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SEG_T0_VM);
IFLO_SEG_T0_VM,
// 222 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SETBE_T0_CC);
IFLO_SETBE_T0_CC,
// 223 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SETB_T0_CC);
IFLO_SETB_T0_CC,
// 224 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SETLE_T0_CC);
IFLO_SETLE_T0_CC,
// 225 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SETL_T0_CC);
IFLO_SETL_T0_CC,
// 226 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SETO_T0_CC);
IFLO_SETO_T0_CC,
// 227 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SETP_T0_CC);
IFLO_SETP_T0_CC,
// 228 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SETS_T0_CC);
IFLO_SETS_T0_CC,
// 229 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_SETZ_T0_CC);
IFLO_SETZ_T0_CC,
// 230 
// ./target-i386/cpu.h

// -->     iferret_log_op_write_1(IFLO_SET_CPL,cpl);
IFLO_SET_CPL,
// 231 
// ./target-i386/helper.c

// -->   iferret_log_op_write_4444(IFLO_SPAWN_NEW_PID,current_pid,current_uid,parent_pid,parent_uid);
// ./target-i386/iferret_syscall.c

// --> 	iferret_log_op_write_44(IFLO_SPAWN_NEW_PID,EAX,element.syscall.pid);
IFLO_SPAWN_NEW_PID,
// 232 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_SUBL_A0_2);
IFLO_SUBL_A0_2,
// 233 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_SUBL_A0_4);
IFLO_SUBL_A0_4,
// 234 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_SUBL_T0_T1);
IFLO_SUBL_T0_T1,
// 235 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_SYSENTER);
IFLO_SYSENTER,
// 236 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_SYSEXIT); 
IFLO_SYSEXIT,
// 237 
// ./target-i386/iferret_syscall.c

// --> 	iferret_log_sysret_op_write_44444(IFLO_SYSEXIT_RET, pid, eip_for_callsite,another_eip, element.syscall.eax, EAX);
IFLO_SYSEXIT_RET,
// 238 
// ./target-i386/helper.c

// -->     iferret_log_op_write_4(IFLO_TB_HEAD_EIP, addr);
IFLO_TB_HEAD_EIP,
// 239 
// ./target-i386/helper.c

// -->   iferret_log_op_write_4(IFLO_UID_CHANGE,current_uid);
IFLO_UID_CHANGE,
// 240 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_WRMSR);
IFLO_WRMSR,
// 241 
// ./target-i386/op.c

// -->   iferret_log_info_flow_op_write_0(IFLO_XORL_T0_T1);
IFLO_XORL_T0_T1,
// 242 
// ./target-i386/op.c

// -->     iferret_log_info_flow_op_write_0(IFLO_XOR_T0_1);
IFLO_XOR_T0_1,
// 243 
//This is just a separator
IFLO_SYS_CALLS_START,
// 244 
// syscall # 0// 0 long sys_restart_syscall(void);
IFLO_SYS_SYS_RESTART_SYSCALL,
// 245 
// syscall # 1// 1 long sys_exit(int error_code);
IFLO_SYS_SYS_EXIT,
// 246 
// syscall # 2// 2 pid_t fork(void);
IFLO_SYS_FORK,
// 247 
// syscall # 3// 3 ssize_t sys_read(unsigned int fd, char __user *buf, size_t count);
IFLO_SYS_SYS_READ,
// 248 
// syscall # 4// 4 ssize_t sys_write(unsigned int fd, const char __user *buf, size_t count);
IFLO_SYS_SYS_WRITE,
// 249 
// syscall # 5// 5 long sys_open(const char __user *filename, int flags, int mode);
IFLO_SYS_SYS_OPEN,
// 250 
// syscall # 6// 6 long sys_close(unsigned int fd);
IFLO_SYS_SYS_CLOSE,
// 251 
// syscall # 7// 7 long sys_waitpid(pid_t pid, int __user *stat_addr, int options);
IFLO_SYS_SYS_WAITPID,
// 252 
// syscall # 8// 8 long sys_creat(const char __user *pathname, int mode);    
IFLO_SYS_SYS_CREAT,
// 253 
// syscall # 9// 9 long sys_link(const char __user *oldname, const char __user *newname);
IFLO_SYS_SYS_LINK,
// 254 
// syscall # 10// 10 long sys_unlink(const char __user *pathname);
IFLO_SYS_SYS_UNLINK,
// 255 
// syscall # 11// 11 int execve(const char *filename, char *const argv[], char *const envp[]);
IFLO_SYS_EXECVE,
// 256 
// syscall # 12// 12 long sys_chdir(const char __user *filename);
IFLO_SYS_SYS_CHDIR,
// 257 
// syscall # 13// 13 long sys_time(time_t __user *tloc);
IFLO_SYS_SYS_TIME,
// 258 
// syscall # 14// 14 long sys_mknod(const char __user *filename, int mode, unsigned dev);
IFLO_SYS_SYS_MKNOD,
// 259 
// syscall # 15// 15 long sys_chmod(const char __user *filename, mode_t mode);
IFLO_SYS_SYS_CHMOD,
// 260 
// syscall # 16// 16 long sys_lchown(const char __user *filename, unsigned dev);
IFLO_SYS_SYS_LCHOWN,
// 261 
// syscall # 17// 17 missing sys_break
IFLO_SYS_SYS_BREAK,
// 262 
// syscall # 18// 18 int stat(const char *path, struct stat *buf);
IFLO_SYS_STAT,
// 263 
// syscall # 19// 19 off_t sys_lseek(unsigned int fd, off_t offset, unsigned int origin);
IFLO_SYS_SYS_LSEEK,
// 264 
// syscall # 20// 20 long sys_getpid(void);
IFLO_SYS_SYS_GETPID,
// 265 
// syscall # 21// 21 long sys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);
IFLO_SYS_SYS_MOUNT,
// 266 
// syscall # 22// 22 long sys_umount(char __user *name, int flags);
IFLO_SYS_SYS_UMOUNT,
// 267 
// syscall # 23// 23 long sys_setuid(uid_t uid);
IFLO_SYS_SYS_SETUID,
// 268 
// syscall # 24// 24 long sys_getuid(void);
IFLO_SYS_SYS_GETUID,
// 269 
// syscall # 25// 25 long sys_stime(time_t __user *tptr);
IFLO_SYS_SYS_STIME,
// 270 
// syscall # 26// 26 long sys_ptrace(long request, long pid, long addr, long data);
IFLO_SYS_SYS_PTRACE,
// 271 
// syscall # 27// 27 unsigned long sys_alarm(unsigned int seconds);
IFLO_SYS_SYS_ALARM,
// 272 
// syscall # 28// 28 missing sys_oldfstat 
IFLO_SYS_SYS_OLDFSTAT,
// 273 
// syscall # 29// 29 long sys_pause(void);
IFLO_SYS_SYS_PAUSE,
// 274 
// syscall # 30// 30 long sys_utime(char __user *filename, struct utimbuf __user *times);
IFLO_SYS_SYS_UTIME,
// 275 
// syscall # 31// 31 missing sys_stty
IFLO_SYS_SYS_STTY,
// 276 
// syscall # 32// 32 missing sys_gtty
IFLO_SYS_SYS_GTTY,
// 277 
// syscall # 33// 33 long sys_access(const char __user *filename, int mode);
IFLO_SYS_SYS_ACCESS,
// 278 
// syscall # 34// 34 long sys_nice(int increment);
IFLO_SYS_SYS_NICE,
// 279 
// syscall # 35// 35 missing sys_ftime 
IFLO_SYS_SYS_FTIME,
// 280 
// syscall # 36// 36 long sys_sync(void);
IFLO_SYS_SYS_SYNC,
// 281 
// syscall # 37// 37 long sys_kill(int pid, int sig);
IFLO_SYS_SYS_KILL,
// 282 
// syscall # 38// 38 long sys_rename(const char __user *oldname, const char __user *newname);
IFLO_SYS_SYS_RENAME,
// 283 
// syscall # 39// 39 long sys_mkdir(const char __user *pathname, int mode);
IFLO_SYS_SYS_MKDIR,
// 284 
// syscall # 40// 40 long sys_rmdir(const char __user *pathname);
IFLO_SYS_SYS_RMDIR,
// 285 
// syscall # 41// 41 long sys_dup(unsigned int fildes);
IFLO_SYS_SYS_DUP,
// 286 
// syscall # 42// 42 int pipe(int pipefd[2]);
IFLO_SYS_PIPE,
// 287 
// syscall # 43// 43 long sys_times(struct tms __user *tbuf);
IFLO_SYS_SYS_TIMES,
// 288 
// syscall # 44// 44 missing sys_prof
IFLO_SYS_SYS_PROF,
// 289 
// syscall # 45// 45 unsigned long sys_brk(unsigned long brk);
IFLO_SYS_SYS_BRK,
// 290 
// syscall # 46// 46 long sys_setgid(gid_t gid);
IFLO_SYS_SYS_SETGID,
// 291 
// syscall # 47// 47 long sys_getgid(void);
IFLO_SYS_SYS_GETGID,
// 292 
// syscall # 48// 48 unsigned long sys_signal(int sig, __sighandler_t handler);
IFLO_SYS_SYS_SIGNAL,
// 293 
// syscall # 49// 49 long sys_geteuid(void);
IFLO_SYS_SYS_GETEUID,
// 294 
// syscall # 50// 50 long sys_getegid(void);
IFLO_SYS_SYS_GETEGID,
// 295 
// syscall # 51// 51 long sys_acct(const char __user *name);
IFLO_SYS_SYS_ACCT,
// 296 
// syscall # 52// 52 int umount2(const char *target, int flags);
IFLO_SYS_UMOUNT2,
// 297 
// syscall # 53// 53 missing sys_lock
IFLO_SYS_SYS_LOCK,
// 298 
// syscall # 54// 54 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);
IFLO_SYS_SYS_IOCTL,
// 299 
// syscall # 55// 55 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);
IFLO_SYS_SYS_FCNTL,
// 300 
// syscall # 56// 56 missing sys_mpx 
IFLO_SYS_SYS_MPX,
// 301 
// syscall # 57// 57 long sys_setpgid(pid_t pid, pid_t pgid);    
IFLO_SYS_SYS_SETPGID,
// 302 
// syscall # 58// 58 missing sys_ulimit
IFLO_SYS_SYS_ULIMIT,
// 303 
// syscall # 59// 59 missing sys_oldolduname 
IFLO_SYS_SYS_OLDOLDUNAME,
// 304 
// syscall # 60// 60 long sys_umask(int mask);
IFLO_SYS_SYS_UMASK,
// 305 
// syscall # 61// 61 long sys_chroot(const char __user *filename);
IFLO_SYS_SYS_CHROOT,
// 306 
// syscall # 62// 62 long sys_ustat(unsigned dev, struct ustat __user *ubuf);
IFLO_SYS_SYS_USTAT,
// 307 
// syscall # 63// 63 long sys_dup2(unsigned int oldfd, unsigned int newfd);
IFLO_SYS_SYS_DUP2,
// 308 
// syscall # 64// 64 long sys_getppid(void);
IFLO_SYS_SYS_GETPPID,
// 309 
// syscall # 65// 65 long sys_getpgrp(void);
IFLO_SYS_SYS_GETPGRP,
// 310 
// syscall # 66// 66 long sys_setsid(void);
IFLO_SYS_SYS_SETSID,
// 311 
// syscall # 67// 67 missing sys_sigaction
IFLO_SYS_SYS_SIGACTION,
// 312 
// syscall # 68// 68 long sys_sgetmask(void);
IFLO_SYS_SYS_SGETMASK,
// 313 
// syscall # 69// 69 long sys_ssetmask(int newmask);
IFLO_SYS_SYS_SSETMASK,
// 314 
// syscall # 70// 70 long sys_setreuid(uid_t ruid, uid_t euid);
IFLO_SYS_SYS_SETREUID,
// 315 
// syscall # 71// 71 long sys_setregid(gid_t rgid, gid_t egid);
IFLO_SYS_SYS_SETREGID,
// 316 
// syscall # 72// 72 missing sys_sigsuspend
IFLO_SYS_SYS_SIGSUSPEND,
// 317 
// syscall # 73// 73 long sys_sigpending(old_sigset_t __user *set);
IFLO_SYS_SYS_SIGPENDING,
// 318 
// syscall # 74// 74 long sys_sethostname(char __user *name, int len);
IFLO_SYS_SYS_SETHOSTNAME,
// 319 
// syscall # 75// 75 long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);
IFLO_SYS_SYS_SETRLIMIT,
// 320 
// syscall # 76// 76 long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);
IFLO_SYS_SYS_GETRLIMIT,
// 321 
// syscall # 77// 77 long sys_getrusage(int who, struct rusage __user *ru);
IFLO_SYS_SYS_GETRUSAGE,
// 322 
// syscall # 78// 78 long sys_gettimeofday(struct timeval __user *tv, struct timezone __user *tz);
IFLO_SYS_SYS_GETTIMEOFDAY,
// 323 
// syscall # 79// 79 long sys_settimeofday(struct timeval __user *tv, struct timezone __user *tz);
IFLO_SYS_SYS_SETTIMEOFDAY,
// 324 
// syscall # 80// 80 long sys_getgroups(int gidsetsize, gid_t __user *grouplist);
IFLO_SYS_SYS_GETGROUPS,
// 325 
// syscall # 81// 81 long sys_setgroups(int gidsetsize, gid_t __user *grouplist);
IFLO_SYS_SYS_SETGROUPS,
// 326 
// syscall # 82// 82 long sys_select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct timeval __user *tvp);
IFLO_SYS_SYS_SELECT,
// 327 
// syscall # 83// 83 long sys_symlink(const char __user *old, const char __user *new);
IFLO_SYS_SYS_SYMLINK,
// 328 
// syscall # 84// 84 int oldlstat(const char *path, struct stat *buf);
IFLO_SYS_OLDLSTAT,
// 329 
// syscall # 85// 85 long sys_readlink(const char __user *path, char __user *buf, int bufsiz);
IFLO_SYS_SYS_READLINK,
// 330 
// syscall # 86// 86 long sys_uselib(const char __user *library);
IFLO_SYS_SYS_USELIB,
// 331 
// syscall # 87// 87 long sys_swapon(const char __user *specialfile, int swap_flags);
IFLO_SYS_SYS_SWAPON,
// 332 
// syscall # 88// 88 long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);    
IFLO_SYS_SYS_REBOOT,
// 333 
// syscall # 89// 89 int readdir(unsigned int fd, struct dirent *dirp, unsigned int count);
IFLO_SYS_READDIR,
// 334 
// syscall # 90// 90 void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
IFLO_SYS_MMAP,
// 335 
// syscall # 91// 91 long sys_munmap(unsigned long addr, size_t len);
IFLO_SYS_SYS_MUNMAP,
// 336 
// syscall # 92// 92 long sys_truncate(const char __user *path, unsigned long length);
IFLO_SYS_SYS_TRUNCATE,
// 337 
// syscall # 93// 93 long sys_ftruncate(unsigned int fd, unsigned long length);
IFLO_SYS_SYS_FTRUNCATE,
// 338 
// syscall # 94// 94 long sys_fchmod(unsigned int fd, mode_t mode);
IFLO_SYS_SYS_FCHMOD,
// 339 
// syscall # 95// 95 long sys_fchown(unsigned int fd, uid_t user, gid_t group);
IFLO_SYS_SYS_FCHOWN,
// 340 
// syscall # 96// 96 long sys_getpriority(int which, int who);
IFLO_SYS_SYS_GETPRIORITY,
// 341 
// syscall # 97// 97 long sys_setpriority(int which, int who, int niceval);
IFLO_SYS_SYS_SETPRIORITY,
// 342 
// syscall # 98// 98 missing sys_profil
IFLO_SYS_SYS_PROFIL,
// 343 
// syscall # 99// 99 long sys_statfs(const char __user * path, struct statfs __user *buf);
IFLO_SYS_SYS_STATFS,
// 344 
// syscall # 100// 100 long sys_fstatfs(unsigned int fd, struct statfs __user *buf);
IFLO_SYS_SYS_FSTATFS,
// 345 
// syscall # 101// 101 long sys_ioperm(unsigned long from, unsigned long num, int on);
IFLO_SYS_SYS_IOPERM,
// 346 
IFLO_UNUSED_346,
// 347 
// syscall # 103// 103 long sys_syslog(int type, char __user *buf, int len);
IFLO_SYS_SYS_SYSLOG,
// 348 
// syscall # 104// 104 long sys_setitimer(int which,  struct itimerval __user *value, struct itimerval __user *ovalue);
IFLO_SYS_SYS_SETITIMER,
// 349 
// syscall # 105// 105 long sys_getitimer(int which, struct itimerval __user *value);
IFLO_SYS_SYS_GETITIMER,
// 350 
// syscall # 106// 106 long sys_stat(char __user *filename, struct __old_kernel_stat __user *statbuf);
IFLO_SYS_SYS_STAT,
// 351 
// syscall # 107// 107 long sys_lstat(char __user *filename, struct __old_kernel_stat __user *statbuf);
IFLO_SYS_SYS_LSTAT,
// 352 
// syscall # 108// 108 long sys_fstat(unsigned int fd, struct __old_kernel_stat __user *statbuf);
IFLO_SYS_SYS_FSTAT,
// 353 
// syscall # 109// 109 int old_uname(struct utsname *buf);
IFLO_SYS_OLD_UNAME,
// 354 
// syscall # 110// 110 int iopl(int level);
IFLO_SYS_IOPL,
// 355 
// syscall # 111// 111 long sys_vhangup(void);
IFLO_SYS_SYS_VHANGUP,
// 356 
// syscall # 112// 112 int idle(void);
IFLO_SYS_IDLE,
// 357 
// syscall # 113// 113 int vm86old(struct vm86_struct *info);
IFLO_SYS_VM86OLD,
// 358 
// syscall # 114// 114 long sys_wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);
IFLO_SYS_SYS_WAIT4,
// 359 
// syscall # 115// 115 long sys_swapoff(const char __user *specialfile);
IFLO_SYS_SYS_SWAPOFF,
// 360 
// syscall # 116// 116 long sys_sysinfo(struct sysinfo __user *info);
IFLO_SYS_SYS_SYSINFO,
// 361 
// syscall # 117// 117 int ipc(unsigned int call, int first, int second, int third, void *ptr, long fifth);
IFLO_SYS_IPC,
// 362 
// syscall # 118// 118 long sys_fsync(unsigned int fd);
IFLO_SYS_SYS_FSYNC,
// 363 
// syscall # 119// 119 int sigreturn(unsigned long __unused);
IFLO_SYS_SIGRETURN,
// 364 
// syscall # 120// 120 int clone(int (*fn)(void *), void *child_stack, int flags, void *arg, ...);
IFLO_SYS_CLONE,
// 365 
// syscall # 121// 121 long sys_setdomainname(char __user *name, int len);
IFLO_SYS_SYS_SETDOMAINNAME,
// 366 
// syscall # 122// 122 int uname(struct utsname *buf);
IFLO_SYS_UNAME,
// 367 
// syscall # 123// 123 int modify_ldt(int func, void *ptr, unsigned long bytecount);
IFLO_SYS_MODIFY_LDT,
// 368 
// syscall # 124// 124 long sys_adjtimex(struct timex __user *txc_p);
IFLO_SYS_SYS_ADJTIMEX,
// 369 
// syscall # 125// 125 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);
IFLO_SYS_SYS_MPROTECT,
// 370 
// syscall # 126// 126 long sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset);
IFLO_SYS_SYS_SIGPROCMASK,
// 371 
// syscall # 127// 127 missing sys_create_module 
IFLO_SYS_SYS_CREATE_MODULE,
// 372 
// syscall # 128// 128 long sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);
IFLO_SYS_SYS_INIT_MODULE,
// 373 
// syscall # 129// 129 long sys_delete_module(const char __user *name_user, unsigned int flags);
IFLO_SYS_SYS_DELETE_MODULE,
// 374 
// syscall # 130// 130 missing sys_get_kernel_syms
IFLO_SYS_SYS_GET_KERNEL_SYMS,
// 375 
// syscall # 131// 131 long sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);
IFLO_SYS_SYS_QUOTACTL,
// 376 
// syscall # 132// 132 long sys_getpgid(pid_t pid);
IFLO_SYS_SYS_GETPGID,
// 377 
// syscall # 133// 133 long sys_fchdir(unsigned int fd);
IFLO_SYS_SYS_FCHDIR,
// 378 
// syscall # 134// 134 long sys_bdflush(int func, long data);
IFLO_SYS_SYS_BDFLUSH,
// 379 
// syscall # 135// 135 long sys_sysfs(int option, unsigned long arg1, unsigned long arg2);
IFLO_SYS_SYS_SYSFS,
// 380 
// syscall # 136// 136 long sys_personality(u_long personality);
IFLO_SYS_SYS_PERSONALITY,
// 381 
// syscall # 137// 137 missing sys_afs_syscall 
IFLO_SYS_SYS_AFS_SYSCALL,
// 382 
// syscall # 138// 138 long sys_setfsuid(uid_t uid);
IFLO_SYS_SYS_SETFSUID,
// 383 
// syscall # 139// 139 long sys_setfsgid(gid_t gid);
IFLO_SYS_SYS_SETFSGID,
// 384 
// syscall # 140// 140 missing sys__llseek
IFLO_SYS_SYS__LLSEEK,
// 385 
// syscall # 141// 141 long sys_getdents(unsigned int fd, struct linux_dirent __user *dirent, unsigned int count);
IFLO_SYS_SYS_GETDENTS,
// 386 
// syscall # 142// 142 missing sys__newselect 
IFLO_SYS_SYS__NEWSELECT,
// 387 
// syscall # 143// 143 long sys_flock(unsigned int fd, unsigned int cmd);
IFLO_SYS_SYS_FLOCK,
// 388 
// syscall # 144// 144 long sys_msync(unsigned long start, size_t len, int flags);
IFLO_SYS_SYS_MSYNC,
// 389 
// syscall # 145// 145 ssize_t sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);
IFLO_SYS_SYS_READV,
// 390 
// syscall # 146// 146 ssize_t sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);
IFLO_SYS_SYS_WRITEV,
// 391 
// syscall # 147// 147 long sys_getsid(pid_t pid);
IFLO_SYS_SYS_GETSID,
// 392 
// syscall # 148// 148 long sys_fdatasync(unsigned int fd);
IFLO_SYS_SYS_FDATASYNC,
// 393 
// syscall # 149// 149 missing sys__sysctl
IFLO_SYS_SYS__SYSCTL,
// 394 
// syscall # 150// 150 long sys_mlock(unsigned long start, size_t len);
IFLO_SYS_SYS_MLOCK,
// 395 
// syscall # 151// 151 long sys_munlock(unsigned long start, size_t len);
IFLO_SYS_SYS_MUNLOCK,
// 396 
// syscall # 152// 152 long sys_mlockall(int flags);
IFLO_SYS_SYS_MLOCKALL,
// 397 
// syscall # 153// 153 long sys_munlockall(void);
IFLO_SYS_SYS_MUNLOCKALL,
// 398 
// syscall # 154// 154 long sys_sched_setparam(pid_t pid, struct sched_param __user *param);
IFLO_SYS_SYS_SCHED_SETPARAM,
// 399 
// syscall # 155// 155 long sys_sched_getparam(pid_t pid, struct sched_param __user *param);
IFLO_SYS_SYS_SCHED_GETPARAM,
// 400 
// syscall # 156// 156 long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);
IFLO_SYS_SYS_SCHED_SETSCHEDULER,
// 401 
// syscall # 157// 157 long sys_sched_getscheduler(pid_t pid);
IFLO_SYS_SYS_SCHED_GETSCHEDULER,
// 402 
// syscall # 158// 158 long sys_sched_yield(void);
IFLO_SYS_SYS_SCHED_YIELD,
// 403 
// syscall # 159// 159 long sys_sched_get_priority_max(int policy);
IFLO_SYS_SYS_SCHED_GET_PRIORITY_MAX,
// 404 
// syscall # 160// 160 long sys_sched_get_priority_min(int policy);
IFLO_SYS_SYS_SCHED_GET_PRIORITY_MIN,
// 405 
// syscall # 161// 161 long sys_sched_rr_get_interval(pid_t pid, struct timespec __user *interval);
IFLO_SYS_SYS_SCHED_RR_GET_INTERVAL,
// 406 
// syscall # 162// 162 long sys_nanosleep(struct timespec __user *rqtp, struct timespec __user *rmtp);
IFLO_SYS_SYS_NANOSLEEP,
// 407 
// syscall # 163// 163 unsigned long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);
IFLO_SYS_SYS_MREMAP,
// 408 
// syscall # 164// 164 long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);
IFLO_SYS_SYS_SETRESUID,
// 409 
// syscall # 165// 165 long sys_getresuid16(old_uid_t __user *ruid, old_uid_t __user *euid, old_uid_t __user *suid);
IFLO_SYS_SYS_GETRESUID16,
// 410 
// syscall # 166// 166 missing sys_vm86 
IFLO_SYS_SYS_VM86,
// 411 
// syscall # 167// 167 missing sys_query_module 
IFLO_SYS_SYS_QUERY_MODULE,
// 412 
// syscall # 168// 168 long sys_poll(struct pollfd __user *ufds, unsigned int nfds, long timeout);
IFLO_SYS_SYS_POLL,
// 413 
// syscall # 169// 169 long sys_nfsservctl(int cmd, struct nfsctl_arg __user *arg, void __user *res);
IFLO_SYS_SYS_NFSSERVCTL,
// 414 
// syscall # 170// 170 int setresgid(gid_t rgid, gid_t egid, gid_t sgid);
IFLO_SYS_SETRESGID,
// 415 
// syscall # 171// 171 long sys_getresgid(gid_t __user *rgid, gid_t __user *egid, gid_t __user *sgid);
IFLO_SYS_SYS_GETRESGID,
// 416 
// syscall # 172// 172 long sys_prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
IFLO_SYS_SYS_PRCTL,
// 417 
// syscall # 173// 173 int rt_sigreturn(unsigned long __unused);
IFLO_SYS_RT_SIGRETURN,
// 418 
// syscall # 174// 174 int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
IFLO_SYS_SIGACTION,
// 419 
// syscall # 175// 175 int sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);
IFLO_SYS_SYS_RT_SIGPROCMASK,
// 420 
// syscall # 176// 176 long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize);
IFLO_SYS_SYS_RT_SIGPENDING,
// 421 
// syscall # 177// 177 long sys_rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct timespec __user *uts, size_t sigsetsize);
IFLO_SYS_SYS_RT_SIGTIMEDWAIT,
// 422 
// syscall # 178// 178 long sys_rt_sigqueueinfo(int pid, int sig, siginfo_t __user *uinfo);
IFLO_SYS_SYS_RT_SIGQUEUEINFO,
// 423 
// syscall # 179// 179 int sigsuspend(const sigset_t *mask);
IFLO_SYS_SIGSUSPEND,
// 424 
// syscall # 180// 180 ssize_t sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);
IFLO_SYS_SYS_PREAD64,
// 425 
// syscall # 181// 181 ssize_t sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);
IFLO_SYS_SYS_PWRITE64,
// 426 
// syscall # 182// 182 long sys_chown(const char __user *filename, uid_t user, gid_t group);
IFLO_SYS_SYS_CHOWN,
// 427 
// syscall # 183// 183 long sys_getcwd(char __user *buf, unsigned long size);
IFLO_SYS_SYS_GETCWD,
// 428 
// syscall # 184// 184 long sys_capget(cap_user_header_t header, cap_user_data_t dataptr);
IFLO_SYS_SYS_CAPGET,
// 429 
// syscall # 185// 185 long sys_capset(cap_user_header_t header, const cap_user_data_t data);
IFLO_SYS_SYS_CAPSET,
// 430 
// syscall # 186// 186 int sigaltstack(const stack_t *ss, stack_t *oss);
IFLO_SYS_SIGALTSTACK,
// 431 
// syscall # 187// 187 ssize_t sys_sendfile(int out_fd, int in_fd, off_t __user *offset, size_t count);
IFLO_SYS_SYS_SENDFILE,
// 432 
// syscall # 188// 188 missing sys_getpmsg 
IFLO_SYS_SYS_GETPMSG,
// 433 
// syscall # 189// 189 missing sys_putpmsg 
IFLO_SYS_SYS_PUTPMSG,
// 434 
// syscall # 190// 190 pid_t vfork(void);
IFLO_SYS_VFORK,
// 435 
// syscall # 191// 191 int getrlimit(int resource, struct rlimit *rlim);
IFLO_SYS_GETRLIMIT,
// 436 
// syscall # 192// 192 void *mmap2(void *addr, size_t length, int prot, int flags, int fd, off_t pgoffset);
IFLO_SYS_MMAP2,
// 437 
// syscall # 193// 193 long sys_truncate64(const char __user *path, loff_t length);
IFLO_SYS_SYS_TRUNCATE64,
// 438 
// syscall # 194// 194 long sys_ftruncate64(unsigned int fd, loff_t length);
IFLO_SYS_SYS_FTRUNCATE64,
// 439 
// syscall # 195// 195 long sys_stat64(char __user *filename, struct stat64 __user *statbuf);
IFLO_SYS_SYS_STAT64,
// 440 
// syscall # 196// 196 long sys_lstat64(char __user *filename, struct stat64 __user *statbuf);
IFLO_SYS_SYS_LSTAT64,
// 441 
// syscall # 197// 197 long sys_fstat64(unsigned long fd, struct stat64 __user *statbuf);
IFLO_SYS_SYS_FSTAT64,
// 442 
// syscall # 198// 198 int lchown(const char *path, uid_t owner, gid_t group);
IFLO_SYS_LCHOWN,
// 443 
// syscall # 199// 199 uid_t getuid(void);
IFLO_SYS_GETUID,
// 444 
// syscall # 200// 200 gid_t getgid(void);
IFLO_SYS_GETGID,
// 445 
// syscall # 201// 201 uid_t geteuid(void);
IFLO_SYS_GETEUID,
// 446 
// syscall # 202// 202 gid_t getegid(void);
IFLO_SYS_GETEGID,
// 447 
// syscall # 203// 203 int setreuid(uid_t ruid, uid_t euid);
IFLO_SYS_SETREUID,
// 448 
// syscall # 204// 204 int setregid(gid_t rgid, gid_t egid);
IFLO_SYS_SETREGID,
// 449 
// syscall # 205// 205 int getgroups(int size, gid_t list[]);
IFLO_SYS_GETGROUPS,
// 450 
// syscall # 206// 206 int setgroups(size_t size, const gid_t *list);
IFLO_SYS_SETGROUPS,
// 451 
// syscall # 207// 207 int fchown(int fd, uid_t owner, gid_t group);
IFLO_SYS_FCHOWN,
// 452 
// syscall # 208// 208 int setresuid(uid_t ruid, uid_t euid, uid_t suid);
IFLO_SYS_SETRESUID,
// 453 
// syscall # 209// 209 int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
IFLO_SYS_GETRESUID,
// 454 
// syscall # 210// 210 int setresgid32(gid_t rgid, gid_t egid, gid_t sgid);
IFLO_SYS_SETRESGID32,
// 455 
// syscall # 211// 211 int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
IFLO_SYS_GETRESGID,
// 456 
// syscall # 212// 212 int chown(const char *path, uid_t owner, gid_t group);
IFLO_SYS_CHOWN,
// 457 
// syscall # 213// 213 int setuid(uid_t uid);
IFLO_SYS_SETUID,
// 458 
// syscall # 214// 214 int setgid(gid_t gid);
IFLO_SYS_SETGID,
// 459 
// syscall # 215// 215 int setfsuid(uid_t fsuid);
IFLO_SYS_SETFSUID,
// 460 
// syscall # 216// 216 int setfsgid(uid_t fsgid);
IFLO_SYS_SETFSGID,
// 461 
// syscall # 217// 217 long sys_pivot_root(const char __user *new_root, const char __user *put_old);
IFLO_SYS_SYS_PIVOT_ROOT,
// 462 
// syscall # 218// 218 long sys_mincore(unsigned long start, size_t len, unsigned char __user * vec);
IFLO_SYS_SYS_MINCORE,
// 463 
// syscall # 219// 219 long sys_madvise(unsigned long start, size_t len, int behavior);
IFLO_SYS_SYS_MADVISE,
// 464 
// syscall # 220// 220 long sys_getdents64(4(unsigned int fd, struct linux_dirent64 __user *dirent, unsigned int count);
IFLO_SYS_SYS_GETDENTS64,
// 465 
// syscall # 221// 221 long sys_fcntl64(unsigned int fd, unsigned int cmd, unsigned long arg);
IFLO_SYS_SYS_FCNTL64,
// 466 
IFLO_UNUSED_466,
// 467 
IFLO_UNUSED_467,
// 468 
// syscall # 224// 224 long sys_gettid(void);
IFLO_SYS_SYS_GETTID,
// 469 
// syscall # 225// 225 ssize_t sys_readahead(int fd, loff_t offset, size_t count);
IFLO_SYS_SYS_READAHEAD,
// 470 
// syscall # 226// 226 long sys_setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);
IFLO_SYS_SYS_SETXATTR,
// 471 
// syscall # 227// 227 long sys_lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);
IFLO_SYS_SYS_LSETXATTR,
// 472 
// syscall # 228// 228 long sys_fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);
IFLO_SYS_SYS_FSETXATTR,
// 473 
// syscall # 229// 229 ssize_t sys_getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);
IFLO_SYS_SYS_GETXATTR,
// 474 
// syscall # 230// 230 ssize_t sys_lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);
IFLO_SYS_SYS_LGETXATTR,
// 475 
// syscall # 231// 231 ssize_t sys_fgetxattr(int fd, const char __user *name, void __user *value, size_t size);
IFLO_SYS_SYS_FGETXATTR,
// 476 
// syscall # 232// 232 ssize_t sys_listxattr(const char __user *path, char __user *list, size_t size);
IFLO_SYS_SYS_LISTXATTR,
// 477 
// syscall # 233// 233 ssize_t sys_llistxattr(const char __user *path, char __user *list, size_t size);
IFLO_SYS_SYS_LLISTXATTR,
// 478 
// syscall # 234// 234 ssize_t sys_flistxattr(int fd, char __user *list, size_t size);
IFLO_SYS_SYS_FLISTXATTR,
// 479 
// syscall # 235// 235 long sys_removexattr(const char __user *path, const char __user *name);
IFLO_SYS_SYS_REMOVEXATTR,
// 480 
// syscall # 236// 236 long sys_lremovexattr(const char __user *path, const char __user *name);
IFLO_SYS_SYS_LREMOVEXATTR,
// 481 
// syscall # 237// 237 long sys_fremovexattr(int fd, const char __user *name);
IFLO_SYS_SYS_FREMOVEXATTR,
// 482 
// syscall # 238// 238 long sys_tkill(int pid, int sig);
IFLO_SYS_SYS_TKILL,
// 483 
// syscall # 239// 239 ssize_t sys_sendfile64(int out_fd, int in_fd, loff_t __user *offset, size_t count);
IFLO_SYS_SYS_SENDFILE64,
// 484 
// syscall # 240// 240 long sys_futex(u32 __user *uaddr, int op, u32 val, struct timespec __user *utime, u32 __user *uaddr2, u32 val3);
IFLO_SYS_SYS_FUTEX,
// 485 
// syscall # 241// 241 long sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);
IFLO_SYS_SYS_SCHED_SETAFFINITY,
// 486 
// syscall # 242// 242 long sys_sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);
IFLO_SYS_SYS_SCHED_GETAFFINITY,
// 487 
// syscall # 243// 243 int set_thread_area(struct user_desc *u_info);
IFLO_SYS_SET_THREAD_AREA,
// 488 
// syscall # 244// 244 int get_thread_area(struct user_desc *u_info);
IFLO_SYS_GET_THREAD_AREA,
// 489 
// syscall # 245// 245 int sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);
IFLO_SYS_SYS_IO_SETUP,
// 490 
// syscall # 246// 246 long sys_io_destroy(aio_context_t ctx);
IFLO_SYS_SYS_IO_DESTROY,
// 491 
// syscall # 247// 247 long sys_io_getevents(aio_context_t ctx_id, long min_nr,long nr, struct io_event __user *events, struct timespec __user *timeout);
IFLO_SYS_SYS_IO_GETEVENTS,
// 492 
// syscall # 248// 248 long sys_io_submit(aio_context_t, long, struct iocb __user * __user *);
IFLO_SYS_SYS_IO_SUBMIT,
// 493 
// syscall # 249// 249 long sys_io_cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);
IFLO_SYS_SYS_IO_CANCEL,
// 494 
// syscall # 250// 250 int sys_fadvise64(int fd, loff_t offset, size_t len, int advice); 
IFLO_SYS_SYS_FADVISE64,
// 495 
IFLO_UNUSED_495,
// 496 
// syscall # 252// 252 void sys_exit_group(int error_code);
IFLO_SYS_SYS_EXIT_GROUP,
// 497 
// syscall # 253// 253 long sys_lookup_dcookie(u64 cookie64, char __user *buf, size_t len);
IFLO_SYS_SYS_LOOKUP_DCOOKIE,
// 498 
// syscall # 254// 254 long sys_epoll_create(int size);
IFLO_SYS_SYS_EPOLL_CREATE,
// 499 
// syscall # 255// 255 long sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);
IFLO_SYS_SYS_EPOLL_CTL,
// 500 
// syscall # 256// 256 long sys_epoll_wait(int epfd, struct epoll_event __user *events, int maxevents, int timeout);
IFLO_SYS_SYS_EPOLL_WAIT,
// 501 
// syscall # 257// 257 long sys_remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);
IFLO_SYS_SYS_REMAP_FILE_PAGES,
// 502 
// syscall # 258// 258 long sys_set_tid_address(int __user *tidptr);
IFLO_SYS_SYS_SET_TID_ADDRESS,
// 503 
// syscall # 259// 259 long sys_timer_create(clockid_t which_clock, struct sigevent __user *timer_event_spec, timer_t __user * created_timer_id);
IFLO_SYS_SYS_TIMER_CREATE,
// 504 
// syscall # 260// 260 long sys_timer_settime(timer_t timer_id, int flags, const struct itimerspec __user *new_setting, struct itimerspec __user *old_setting);
IFLO_SYS_SYS_TIMER_SETTIME,
// 505 
// syscall # 261// 261 long sys_timer_gettime(timer_t timer_id, struct itimerspec __user *setting);
IFLO_SYS_SYS_TIMER_GETTIME,
// 506 
// syscall # 262// 262 missing sys_timer_getoverrun
IFLO_SYS_SYS_TIMER_GETOVERRUN,
// 507 
// syscall # 263// 263 long sys_timer_delete(timer_t timer_id);
IFLO_SYS_SYS_TIMER_DELETE,
// 508 
// syscall # 264// 264 long sys_clock_settime(clockid_t which_clock, const struct timespec __user *tp);
IFLO_SYS_SYS_CLOCK_SETTIME,
// 509 
// syscall # 265// 265 long sys_clock_gettime(clockid_t which_clock, struct timespec __user *tp);
IFLO_SYS_SYS_CLOCK_GETTIME,
// 510 
// syscall # 266// 266 long sys_clock_getres(clockid_t which_clock, struct timespec __user *tp);
IFLO_SYS_SYS_CLOCK_GETRES,
// 511 
// syscall # 267// 267 long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct timespec __user *rqtp, struct timespec __user *rmtp);
IFLO_SYS_SYS_CLOCK_NANOSLEEP,
// 512 
// syscall # 268// 268 long sys_statfs64(const char __user *path, size_t sz, struct statfs64 __user *buf);
IFLO_SYS_SYS_STATFS64,
// 513 
// syscall # 269// 269 long sys_fstatfs64(unsigned int fd, size_t sz, struct statfs64 __user *buf);
IFLO_SYS_SYS_FSTATFS64,
// 514 
// syscall # 270// 270 long sys_tgkill(int tgid, int pid, int sig);
IFLO_SYS_SYS_TGKILL,
// 515 
// syscall # 271// 271 long sys_utimes(char __user *filename, struct timeval __user *utimes);
IFLO_SYS_SYS_UTIMES,
// 516 
// syscall # 272// 272 long sys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);
IFLO_SYS_SYS_FADVISE64_64,
// 517 
// syscall # 273// 273 missing sys_vserver 
IFLO_SYS_SYS_VSERVER,
// 518 
// syscall # 274// 274 long sys_mbind(unsigned long start, unsigned long len, unsigned long mode, unsigned long __user *nmask, unsigned long maxnode, unsigned flags);
IFLO_SYS_SYS_MBIND,
// 519 
// syscall # 275// 275 long sys_get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);
IFLO_SYS_SYS_GET_MEMPOLICY,
// 520 
// syscall # 276// 276 long sys_set_mempolicy(int mode, unsigned long __user *nmask, unsigned long maxnode);
IFLO_SYS_SYS_SET_MEMPOLICY,
// 521 
// syscall # 277// 277 long sys_mq_open(const char __user *name, int oflag, mode_t mode,  struct mq_attr __user *attr);
IFLO_SYS_SYS_MQ_OPEN,
// 522 
// syscall # 278// 278 long sys_mq_unlink(const char __user *name);
IFLO_SYS_SYS_MQ_UNLINK,
// 523 
// syscall # 279// 279 long sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec __user *abs_timeout);
IFLO_SYS_SYS_MQ_TIMEDSEND,
// 524 
// syscall # 280// 280 ssize_t sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr,  size_t msg_len, unsigned int __user *msg_prio, const struct timespec __user *abs_timeout);
IFLO_SYS_SYS_MQ_TIMEDRECEIVE,
// 525 
// syscall # 281// 281 long sys_mq_notify(mqd_t mqdes, const struct sigevent __user *notification);
IFLO_SYS_SYS_MQ_NOTIFY,
// 526 
// syscall # 282// 282 long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);
IFLO_SYS_SYS_MQ_GETSETATTR,
// 527 
// syscall # 283// 283 long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);
IFLO_SYS_SYS_KEXEC_LOAD,
// 528 
// syscall # 284// 284 long sys_waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);
IFLO_SYS_SYS_WAITID,
// 529 
// syscall # 285// 285 missing sys_setaltroot 
IFLO_SYS_SYS_SETALTROOT,
// 530 
// syscall # 286// 286 long sys_add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);
IFLO_SYS_SYS_ADD_KEY,
// 531 
// syscall # 287// 287 long sys_request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);
IFLO_SYS_SYS_REQUEST_KEY,
// 532 
// syscall # 288// 288 long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
IFLO_SYS_SYS_KEYCTL,
// 533 
// syscall # 289// 289 long sys_ioprio_set(int which, int who, int ioprio);
IFLO_SYS_SYS_IOPRIO_SET,
// 534 
// syscall # 290// 290 long sys_ioprio_get(int which, int who);
IFLO_SYS_SYS_IOPRIO_GET,
// 535 
// syscall # 291// 291 long sys_inotify_init(void);
IFLO_SYS_SYS_INOTIFY_INIT,
// 536 
// syscall # 292// 292 long sys_inotify_add_watch(int fd, const char __user *path, u32 mask);
IFLO_SYS_SYS_INOTIFY_ADD_WATCH,
// 537 
// syscall # 293// 293 long sys_inotify_rm_watch(int fd, u32 wd);
IFLO_SYS_SYS_INOTIFY_RM_WATCH,
// 538 
// syscall # 294// 294 long sys_migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user *from, const unsigned long __user *to); 
IFLO_SYS_SYS_MIGRATE_PAGES,
// 539 
// syscall # 295// 295 long sys_openat(int dfd, const char __user *filename, int flags, int mode);
IFLO_SYS_SYS_OPENAT,
// 540 
// syscall # 296// 296 long sys_mkdirat(int dfd, const char __user * pathname, int mode);
IFLO_SYS_SYS_MKDIRAT,
// 541 
// syscall # 297// 297 long sys_mknodat(int dfd, const char __user * filename, int mode, unsigned dev);
IFLO_SYS_SYS_MKNODAT,
// 542 
// syscall # 298// 298 long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);
IFLO_SYS_SYS_FCHOWNAT,
// 543 
// syscall # 299// 299 long sys_futimesat(int dfd, char __user *filename, struct timeval __user *utimes);
IFLO_SYS_SYS_FUTIMESAT,
// 544 
// syscall # 300// 300 long sys_fstatat64(int dfd, char __user *filename, struct stat64 __user *statbuf, int flag);
IFLO_SYS_SYS_FSTATAT64,
// 545 
// syscall # 301// 301 long sys_unlinkat(int dfd, const char __user * pathname, int flag);
IFLO_SYS_SYS_UNLINKAT,
// 546 
// syscall # 302// 302 long sys_renameat(int olddfd, const char __user * oldname, int newdfd, const char __user * newname);
IFLO_SYS_SYS_RENAMEAT,
// 547 
// syscall # 303// 303 long sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);
IFLO_SYS_SYS_LINKAT,
// 548 
// syscall # 304// 304 long sys_symlinkat(const char __user * oldname, int newdfd, const char __user * newname);
IFLO_SYS_SYS_SYMLINKAT,
// 549 
// syscall # 305// 305 long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);
IFLO_SYS_SYS_READLINKAT,
// 550 
// syscall # 306// 306 long sys_fchmodat(int dfd, const char __user * filename, mode_t mode);
IFLO_SYS_SYS_FCHMODAT,
// 551 
// syscall # 307// 307 long sys_faccessat(int dfd, const char __user *filename, int mode);
IFLO_SYS_SYS_FACCESSAT,
// 552 
// syscall # 308// 308 int pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timespec *timeout, const sigset_t *sigmask);
IFLO_SYS_PSELECT,
// 553 
// syscall # 309// 309 int ppoll(struct pollfd *fds, nfds_t nfds, const struct timespec *timeout, const sigset_t *sigmask);
IFLO_SYS_PPOLL,
// 554 
// syscall # 310// 310 long sys_unshare(unsigned long unshare_flags);
IFLO_SYS_SYS_UNSHARE,
// 555 
// syscall # 311// 311 long sys_set_robust_list(struct robust_list_head __user *head, size_t len);
IFLO_SYS_SYS_SET_ROBUST_LIST,
// 556 
// syscall # 312// 312 long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);
IFLO_SYS_SYS_GET_ROBUST_LIST,
// 557 
// syscall # 313// 313 long sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);
IFLO_SYS_SYS_SPLICE,
// 558 
// syscall # 314// 314 long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);
IFLO_SYS_SYS_SYNC_FILE_RANGE,
// 559 
// syscall # 315// 315 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);
IFLO_SYS_SYS_TEE,
// 560 
// syscall # 316// 316 long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);
IFLO_SYS_SYS_VMSPLICE,
// 561 
// syscall # 317// 317 long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);
IFLO_SYS_SYS_MOVE_PAGES,
// 562 
// syscall # 318// 318 long sys_getcpu(unsigned __user *cpu, unsigned __user *node,  struct getcpu_cache __user *cache);
IFLO_SYS_SYS_GETCPU,
// 563 
// syscall # 319// 319 long sys_epoll_wait_another(int epfd, struct epoll_event __user *events, int maxevents, int timeout);
IFLO_SYS_SYS_EPOLL_WAIT_ANOTHER,
// 564 
// syscall # 320// 320 long sys_utimensat(int dfd, char __user *filename, struct timespec __user *utimes, int flags);
IFLO_SYS_SYS_UTIMENSAT,
// 565 
// syscall # 321// 321 long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);
IFLO_SYS_SYS_SIGNALFD,
// 566 
// syscall # 322// 322 long sys_timerfd_create(int clockid, int flags);
IFLO_SYS_SYS_TIMERFD_CREATE,
// 567 
// syscall # 323// 323 long sys_eventfd(unsigned int count);
IFLO_SYS_SYS_EVENTFD,
// 568 
// syscall # 324// 324 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);
IFLO_SYS_SYS_FALLOCATE,
// 569 
// syscall # 325// 325 long sys_timerfd_settime(int ufd, int flags, const struct itimerspec __user *utmr, struct itimerspec __user *otmr);
IFLO_SYS_SYS_TIMERFD_SETTIME,
// 570 
// syscall # 326// 326 long sys_timerfd_gettime(int ufd, struct itimerspec __user *otmr); 
IFLO_SYS_SYS_TIMERFD_GETTIME,
// 571 
// syscall # 327// 327 long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);
IFLO_SYS_SYS_SIGNALFD4,
// 572 
// syscall # 328// 328 long sys_eventfd2(unsigned int count, int flags);
IFLO_SYS_SYS_EVENTFD2,
// 573 
// syscall # 329// 329 long sys_epoll_create1(int flags);
IFLO_SYS_SYS_EPOLL_CREATE1,
// 574 
// syscall # 330// 330 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags); 
IFLO_SYS_SYS_DUP3,
// 575 
// syscall # 331// 331 missing sys_pipe2 
IFLO_SYS_SYS_PIPE2,
// 576 
// syscall # 332// 332 long sys_inotify_init1(int flags);
IFLO_SYS_SYS_INOTIFY_INIT1,
// 577 
//This is just a separator
IFLO_SYS_SOCKETCALLS_START,
// 578 
// 	iferret_log_socketcall_op_write_444(scp,IFLO_SYS_SOCKETCALL_SOCKET,family,type,protocol);
IFLO_SYS_SOCKETCALL_SOCKET,
// 579 
// 	  iferret_log_socketcall_op_write_444444444(scp,IFLO_SYS_SOCKETCALL_BIND_PF_LOCAL,fd,b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_BIND_PF_LOCAL,
// 580 
// 	  iferret_log_socketcall_op_write_444444444(scp,IFLO_SYS_SOCKETCALL_BIND_PF_INET,fd,b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_BIND_PF_INET,
// 581 
// 	  iferret_log_socketcall_op_write_444444444(scp,IFLO_SYS_SOCKETCALL_BIND_PF_NETLINK,fd,b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_BIND_PF_NETLINK,
// 582 
// 	  iferret_log_socketcall_op_write_44444444444444444444(scp,IFLO_SYS_SOCKETCALL_BIND_PF_PACKET,fd,b0,b1,b2,b3,b4,b5,b6,b7,*sptr,pkttype,halen,tempbuf[12], tempbuf[13], tempbuf[14], tempbuf[15],tempbuf[16], tempbuf[17], tempbuf[18], tempbuf[19]);
IFLO_SYS_SOCKETCALL_BIND_PF_PACKET,
// 583 
// 	  iferret_log_socketcall_op_write_4444444444(scp,IFLO_SYS_SOCKETCALL_BIND_ELSE,sap->sin_family, fd,b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_BIND_ELSE,
// 584 
// 	  iferret_log_socketcall_op_write_444444444(scp,IFLO_SYS_SOCKETCALL_CONNECT_PF_LOCAL, fd,b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_CONNECT_PF_LOCAL,
// 585 
// 	  iferret_log_socketcall_op_write_444444444(scp,IFLO_SYS_SOCKETCALL_CONNECT_PF_INET, fd,b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_CONNECT_PF_INET,
// 586 
// 	  iferret_log_socketcall_op_write_4444444444(scp,IFLO_SYS_SOCKETCALL_CONNECT_PF_ELSE, sap->sin_family, fd,b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_CONNECT_PF_ELSE,
// 587 
//       iferret_log_socketcall_op_write_4(scp,IFLO_SYS_SOCKETCALL_LISTEN,*((int*) tempbuf));
IFLO_SYS_SOCKETCALL_LISTEN,
// 588 
//       iferret_log_socketcall_op_write_4(scp,IFLO_SYS_SOCKETCALL_ACCEPT,*(int*) tempbuf); 
IFLO_SYS_SOCKETCALL_ACCEPT,
// 589 
//       iferret_log_socketcall_op_write_4(scp,IFLO_SYS_SOCKETCALL_GETSOCKNAME,*(int*) tempbuf); 
IFLO_SYS_SOCKETCALL_GETSOCKNAME,
// 590 
//       iferret_log_socketcall_op_write_4(scp,IFLO_SYS_SOCKETCALL_GETPEERNAME,*(int*) tempbuf); 
IFLO_SYS_SOCKETCALL_GETPEERNAME,
// 591 
// 	iferret_log_socketcall_op_write_4444(scp,IFLO_SYS_SOCKETCALL_SOCKETPAIR,domain,type,protocol,*(int*)tempbuf); 
IFLO_SYS_SOCKETCALL_SOCKETPAIR,
// 592 
// 	iferret_log_socketcall_op_write_4(scp,IFLO_SYS_SOCKETCALL_SEND,fd);
IFLO_SYS_SOCKETCALL_SEND,
// 593 
// 	iferret_log_socketcall_op_write_444(scp,IFLO_SYS_SOCKETCALL_RECV,fd,msg,len);
IFLO_SYS_SOCKETCALL_RECV,
// 594 
// 	  iferret_log_socketcall_op_write_444444444(scp,IFLO_SYS_SOCKETCALL_SENDTO_PF_LOCAL, fd,b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_SENDTO_PF_LOCAL,
// 595 
// 	  iferret_log_socketcall_op_write_444444444(scp,IFLO_SYS_SOCKETCALL_SENDTO_PF_INET, fd,b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_SENDTO_PF_INET,
// 596 
// 	  iferret_log_socketcall_op_write_4444444444(scp,IFLO_SYS_SOCKETCALL_SENDTO_PF_ELSE, sap->sin_family,fd, b0,b1,b2,b3,b4,b5,b6,b7);
IFLO_SYS_SOCKETCALL_SENDTO_PF_ELSE,
// 597 
// 	iferret_log_socketcall_op_write_4(scp,IFLO_SYS_SOCKETCALL_RECVFROM,fd);
IFLO_SYS_SOCKETCALL_RECVFROM,
// 598 
// 	iferret_log_socketcall_op_write_44(scp,IFLO_SYS_SOCKETCALL_SHUTDOWN,fd,*ptr);
IFLO_SYS_SOCKETCALL_SHUTDOWN,
// 599 
// 	iferret_log_socketcall_op_write_444(scp,IFLO_SYS_SOCKETCALL_SETSOCKOPT,fd,level,option);
IFLO_SYS_SOCKETCALL_SETSOCKOPT,
// 600 
// 	iferret_log_socketcall_op_write_444(scp,IFLO_SYS_SOCKETCALL_GETSOCKOPT,fd,level,option);
IFLO_SYS_SOCKETCALL_GETSOCKOPT,
// 601 
// 	iferret_log_socketcall_op_write_4(scp,IFLO_SYS_SOCKETCALL_SENDMSG,fd);
IFLO_SYS_SOCKETCALL_SENDMSG,
// 602 
// 	iferret_log_socketcall_op_write_4(scp,IFLO_SYS_SOCKETCALL_RECVMSG,fd);
IFLO_SYS_SOCKETCALL_RECVMSG,
// 603 
IFLO_DUMMY_LAST
} iferret_log_op_enum_t;
#endif
